#!/bin/bash

# INIT

# If we are in a directory with no .dotman file, prompt
# the user to create one. Mainly to prevent creating
# artifacts accidentally when the tool is used in the
# wrong directory
if [ ! -e "./.dotman" ]; then
  read -p "No .dotman file here, create one? " -n 1 -r;
  printf "\n";
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    touch "./.dotman";
  fi
fi

# ACTIONS

# The add action adds a local/target filepath pair to the register
add_action() {
  # Check if a conflicting entry exists
  EXISTS="$(cat .dotman | grep -w "$1" | awk '{print $1}')";
  if [ "$EXISTS" ]; then
    printf "Conflicting entry exists: $EXISTS\n";
    exit 0;
  fi
  # Write the filepath pair to the register
  echo "$2  $1" >> "./.dotman";
  # Check if the write was successful
  SUCCESS="$(cat .dotman | grep -w "$1" | awk '{print $1}')";
  if [ "$SUCCESS" ]; then
    printf "Added $1 to .dotman\n";
  else
    printf "Couldn't write to .dotman file\n";
  fi
}

# The import action overwrites the local file with the target file
import_action() {
  TARGET="$(cat .dotman | grep -w "$1" | awk '{print $2}')";
  LOCAL="$(cat .dotman | grep -w "$1" | awk '{print $1}')";
  if [ -e "$TARGET" ]; then
    if [ -e "$LOCAL" ]; then
    DIFF=$(diff $TARGET ./$LOCAL);
    DIFF_MSG=$(diff -q $TARGET ./$LOCAL);
    else
    DIFF="$LOCAL\n";
    DIFF_MSG="Create:\n";
    fi
    if [ "$DIFF_MSG" ]; then
    printf "$DIFF_MSG\n$DIFF\n"
    read -p "Write $TARGET to $LOCAL? [ Y/n ] " -n 1 -r;
    else
    printf "$TARGET and $LOCAL are the same\n";
    exit 0;
    fi
  if [[ ! $REPLY =~ ^[Nn]$ ]]; then
    cp $TARGET ./$LOCAL;
    printf "Imported $TARGET to $LOCAL\n";
  fi
  else
    printf "$TARGET: File not found\n";
  fi
}

# The export action overwrites the relative file with the local file
export_action() {
  # Verify the local file exists
  LOCAL="$(cat .dotman | grep -w "$1" | awk '{print $1}')";
  if [ ! -e "$LOCAL" ]; then
    printf "$1: File not found\n";
    exit 1;
  fi
  # Check if target file already exists
  TARGET="$(cat .dotman | grep -w "$1" | awk '{print $2}')";
  if [ -e "$TARGET" ]; then
    DIFF_MSG=$(diff -q $LOCAL $TARGET);
    DIFF=$(diff $LOCAL $TARGET);
    if [ "$DIFF_MSG" ]; then
    printf "$DIFF_MSG\n$DIFF\n";
      read -p "Will write diff to $TARGET. Ok? [Y/n] " -n 1 -r;
    else
      printf "$LOCAL and $TARGET are the same\n";
      exit 0;
    fi
    if [[ ! $REPLY =~ ^[Nn]$ ]]; then
      cp $LOCAL $TARGET;
      printf "Wrote to $TARGET\n";
    fi
  fi
}

# The diff action displays a diff for the local and target files
diff_action() {
  # Verify the local file exists
  LOCAL="$(cat .dotman | grep -w "$1" | awk '{print $1}')";
  if [ ! -e "$LOCAL" ]; then
    printf "$1: File not found\n";
    exit 1;
  fi
  # Check if target file already exists
  TARGET="$(cat .dotman | grep -w "$1" | awk '{print $2}')";
  if [ -e "$TARGET" ]; then
    DIFF_MSG=$(diff -q $LOCAL $TARGET);
    DIFF=$(diff $LOCAL $TARGET);
    if [ "$DIFF_MSG" ]; then
    printf "$DIFF_MSG\n$DIFF\n";
    else
      printf "$LOCAL and $TARGET are the same\n";
      exit 0;
    fi
  fi
}

# The rm action removes a filepath pair from the register
remove_action() {
  EXISTS=$(cat .dotman | grep -w "$1");
  if [ "$EXISTS" ]; then
    REGEX="/$1/d";
    sed -i $REGEX "./.dotman";
    printf "Removed $EXISTS from .dotman\n";
  else
    printf "$1: Entry not found\n";
  fi
}

# The list action simply prints the register
list_action() {
  cat "./.dotman";
}

# The default action is to print usage information
usage_info() {
  printf "Usage:\n";
  printf "\tdotman add [filepath] [filename]\n";
  printf "\tdotman import [filename]\n";
  printf "\tdotman export [filename]\n";
  printf "\tdotman diff [filename]\n";
  printf "\tdotman rm [filename]\n";
  printf "\tdotman ls\n";
  printf "\tdotman help\n";
}

# Parse and execute args
if [ "$1" = 'add' ]; then
  if [ "$2" -a "$3" ]; then
    add_action $2 $3
    import_action $2
  else
    usage_info
  fi

elif [ "$1" = 'import' ]; then
  if [ "$2" ]; then
    import_action $2
  else
    usage_info
  fi

elif [ "$1" = 'export' ]; then
  if [ "$2" ]; then
    export_action $2
  else
    usage_info
  fi

elif [ "$1" = 'diff' ]; then
  if [ "$2" ]; then
    diff_action $2
  else
    usage_info
  fi

elif [ "$1" = 'rm' ]; then
  if [ "$2" ]; then
    remove_action $2
  else
    usage_info
  fi

elif [ "$1" = 'ls' ]; then
  list_action

else
  usage_info
fi
